// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id          Int             @id @default(autoincrement())
  nombre      String
  apellidos   String
  correo      String
  password    String
  role        Role            @default(USER)
  ordenes     OrdenCompra[]
  movimientos Movimientos?
  traslados   TrasladoBodega?

  bodegas Bodega[]

  UsuarioRegistra  Inventario[] @relation("UsuarioRegistra")
  UsuarioActualiza Inventario[] @relation("UsuarioActualiza")
}

enum Role {
  USER
  ADMIN
}

model SubCategoria {
  id          Int        @id @default(autoincrement())
  categoriaId Int?
  categoria   Categoria? @relation(fields: [categoriaId], references: [id])
  descripcion String
  productos   Producto[]
}

model Categoria {
  id            Int            @id @default(autoincrement())
  descripcion   String
  subCategorias SubCategoria[]
}

model OrdenCompra {
  id            Int      @id @default(autoincrement())
  fechaCreacion DateTime @default(now())

  proovedorId Int
  proovedor   Proovedor @relation(fields: [proovedorId], references: [id])

  bodegaId Int
  bodega   Bodega @relation(fields: [bodegaId], references: [id])

  productos OrdenOnProducto[]

  fechaRecibida DateTime @default(now())

  usuarioId Int
  usuario   Usuario @relation(fields: [usuarioId], references: [id])
 
  cantidad  Int
  updatedAt DateTime @default(now()) @updatedAt
 
  @@map("Orden")
}

model OrdenOnProducto {
  cantidad    Int
  ordencompra OrdenCompra @relation(fields: [ordenId], references: [id])
  ordenId     Int
  productoId  Int
  producto    Producto    @relation(fields: [productoId], references: [id])

  @@id([productoId, ordenId])
}

//proovedores
model Proovedor {
  id               Int           @id @default(autoincrement())
  nombre           String
  correo           String
  numeroTelefonico String
  //Ubicacion
  ubicacionId      Int?          @unique
  ubicacion        Ubicacion?    @relation(fields: [ubicacionId], references: [id])
  direccionExacta  String
  ordenes          OrdenCompra[]
  provincia        String
  canton           String
  distrito         String
  contactos        Contacto[]
}

model Contacto {
  id          Int       @id @default(autoincrement())
  nombre      String
  correo      String
  telefono    String
  proovedorId Int
  proovedor   Proovedor @relation(fields: [proovedorId], references: [id])
}

model Producto {
  id             Int                    @id @default(autoincrement())
  codigo         String
  nombre         String
  descripcion    String                 @db.VarChar(500)
  precio         Decimal                @db.Decimal(10, 2)
  subCategoria   SubCategoria?          @relation(fields: [subCategoriaId], references: [id])
  subCategoriaId Int?
  cilindraje     String                 @db.VarChar(500)
  tipoLLanta     String                 @db.VarChar(500)
  cantidad       Int
  ordenes        OrdenOnProducto[]
  bodegas        Inventario[]
  movimientos    MovimientoOnProducto[]
  traslados      TrasladoOnProducto[]
}

model MovimientoOnProducto {
  movimientoId Int
  movimiento   Movimientos @relation(fields: [movimientoId], references: [id])
  productoId   Int
  producto     Producto    @relation(fields: [productoId], references: [id])

  cantidad Int

  @@id([movimientoId, productoId])
  @@map("MovimientoProducto")
}

model Inventario {
  id Int @id @default(autoincrement())

  bodegaId Int
  bodega   Bodega @relation(fields: [bodegaId], references: [id])

  productoId Int
  producto   Producto @relation(fields: [productoId], references: [id]) // Corregido el campo a productoId

  usuarioregistraId  Int
  usuarioActualizaId Int
 
  usuarioregistra  Usuario? @relation(name: "UsuarioRegistra", fields: [usuarioregistraId], references: [id])
  usuarioActualiza Usuario? @relation(name: "UsuarioActualiza", fields: [usuarioActualizaId], references: [id])

  //cantidades
  cantMax   Int
  cantMin   Int
  cantStock Int
}

model Ubicacion {
  id              Int        @id @default(autoincrement())
  nombre          String
  provincia       String
  canton          String
  distrito        String
  direccionExacta String
  bodegas         Bodega[]
  proovedores     Proovedor?
}

model Bodega {
  id          Int           @id @default(autoincrement())
  nombre      String
  dimensiones String
  capacidad   String
  seguro      Boolean
  //Ubicacion
  ubicacionId Int?          @unique
  ubicacion   Ubicacion?    @relation(fields: [ubicacionId], references: [id])
  //ordenCompra
  orden       OrdenCompra[]
  movimientos Movimientos?
  //producto
  //producto     Producto     @relation(fields: [productoId], references: [id])
  //productoId   Int          @unique
  productos   Inventario[]

  trasladoOrigen  TrasladoBodega[] @relation("TrasladosOrigen")
  trasladoDestino TrasladoBodega[] @relation("TrasladosDestino")

  usuarios Usuario[]
}

model Movimientos {
  id              Int                    @id @default(autoincrement())
  tipoMovimiento  String //entrada, salida, ajuste
  fechaMovimiento DateTime               @default(now()) @updatedAt
  justificacion   String
  usuarioId       Int                    @unique
  usuario         Usuario                @relation(fields: [usuarioId], references: [id])
  bodegaId        Int                    @unique
  bodega          Bodega                 @relation(fields: [bodegaId], references: [id])
  productos       MovimientoOnProducto[]
}

model TrasladoOnProducto {
  cantidad   Int
  productoId Int
  producto   Producto       @relation(fields: [productoId], references: [id])
  trasladoId Int
  traslado   TrasladoBodega @relation(fields: [trasladoId], references: [id])

  @@id([trasladoId, productoId])
}

model TrasladoBodega {
  id Int @id @default(autoincrement())

  Productos TrasladoOnProducto[]

  usuarioId Int     @unique
  usuario   Usuario @relation(fields: [usuarioId], references: [id])

  fechaEnvio    DateTime @default(now()) @updatedAt
  fechaRecibido DateTime @default(now()) @updatedAt

  bodegaOrigen  Bodega? @relation(name: "TrasladosOrigen", fields: [bodegaDestinoId], references: [id])
  bodegaDestino Bodega? @relation(name: "TrasladosDestino", fields: [bodegaOrigenId], references: [id])

  bodegaOrigenId  Int
  bodegaDestinoId Int

  @@map("Traslado")
}
